{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Praefatio","text":"<p>Research Notes</p>"},{"location":"Computing/","title":"Computing \ud83d\udcbb","text":"<ol> <li>Languages &amp; Compiler Design</li> <li>Blockchain</li> <li>Quantum Computing</li> <li>Cybersecurity</li> <li>Artificial Intelligence</li> </ol>"},{"location":"Computing/DefHomoiconic/","title":"Understanding homoiconic","text":"<p>\u201cdefining\u201d homoiconic to mean that it\u2019s easy to manipulate programs? More specifically, say a programming language is homoiconic if (1) the standard library for the language includes a parser, and (2) the parser returns data structures that are easily manipulated by functions in the standard library.</p> <p>Point (2) can be achieved by having the parser return generic data structures such as lists, arrays and hashtables for which the standard library will probably have lots of convenient functions (this what Lisps do); or by having a dedicated AST data type, but including a bunch of AST manipulation functions in the standard library (like Template Haskell).</p> <p>Of course, this isn\u2019t a very precise definition because it relies on the undefined terms \u201cparse\u201d and \u201ceasily manipulated\u201d. Does read_file_to_string() count as a (trivial) parser that produces strings, which can be easily manipulated by standard string functions? The idea is this doesn\u2019t count, but I\u2019ll leave the problem of defining what counts as a parser to other philosophers of programming languages.</p> <p>Unless I\u2019m missing something, there should be (3) these structures can be passed for evaluation immediately at runtime, linked to that runtime, including access to current activation record\u2019s data, global symbols and so on. Without that, (1,2) is simply an ast transformer, and as far as I understand it, doesn\u2019t count.</p>"},{"location":"Computing/DefHomoiconic/#references","title":"References","text":""},{"location":"Computing/DefiningNeuralNetworks/","title":"Defining Neural Networks","text":""},{"location":"Computing/DefiningNeuralNetworks/#references","title":"References","text":"<ul> <li> Why Biological Neurons are Deep Neural Networks - Artem Kirsanov</li> <li> Why Neural Networks aren\u2019t Neural Networks - Sam Sartor</li> <li> But what is a neural network REALLY? - AlgorithmicSimplicity</li> <li> Neural Networks (playlist) - 3Blue1Brown</li> <li> Brain Criticality - Optimizing Neural Computations</li> </ul>"},{"location":"Computing/IA_GeneralizangKnowledge/","title":"IA, Knowledge and Memory","text":"<pre><code>graphflow TB\n    A --&gt; B</code></pre>"},{"location":"Computing/IA_GeneralizangKnowledge/#references","title":"References","text":"<ul> <li> How Your Brain Organizes Information - Artem Kirsanov</li> <li> A Unifying Framework For Memory and Abstraction - Artem Kirsanov</li> <li> Neural manifolds: The Geometry of Behavoiour - Artem Kirsanov</li> <li> How are memories stored in neural networks?</li> <li> Theta Rhythm: A memory clock</li> <li> Relating transformers to models</li> <li> The Tolman-Eichenbaum Machine</li> <li> The Hippocampus Encodes Distances in Multidimensional Feature Space</li> <li> Human reply Spontaneously Reorganizes Experience</li> <li> Concept formation as a Computational Cognitive Process</li> </ul>"},{"location":"Humanities/","title":"Humanities \ud83d\udcda","text":"<ol> <li>Philosophy (Existencialism, Oriental, Analytic)</li> <li>Dance (tango, contact)</li> <li>Poetry &amp; Storytelling</li> <li>Religion</li> </ol>"},{"location":"Humanities/AnalystsAlgebraists/","title":"The quest between Algebraists and Analysts in Maths","text":"<p>Analysts eat corn in spirals, algebraist in rows. It appears, then, that analysis deals with details while algebra takes a broader view.</p>"},{"location":"Humanities/AnalystsAlgebraists/#analyst-top-down","title":"Analyst (Top Down)","text":"<p>He starts with an object and then looks for things he can prove about the object. An analyst can get bogged down in the details of the object he studies. Programmers that say \u201cYAGNI\u201d are analysts. If you like bottom up programming you\u2019re probably an analyst. If you like Lisp you\u2019re probably an analyst. Analysts focus on specific mental models of a system, and then the necessary calculations flow from those models.</p> <p>The analytic world is full of ad hoc methods designed to circumvent technical difficulties such as convergence issues. In fact, the ad hoc nature of analysis even makes it difficult to over-generalize. Analysis deals in inequalities and error terms. This is evident from the very beginning, in the theory of epsilons and deltas. Instead of obtaining precise values, it\u2019s sufficient to show that epsilon and delta are within a certain range.</p>"},{"location":"Humanities/AnalystsAlgebraists/#algebraist-bottom-up","title":"Algebraist (Bottom up)","text":"<p>An algebraist starts with the proof, and then looks for objects for which the proof is valid. An algebraist has the tendency to make trivial statements complicated. Programmers that try to generalize their code as much as possible are algebraists. If you like interfaces and design patterns you\u2019re probably an algebraist. If you like Haskell, you\u2019re probably an algebraist. He focus on kinds of manipulations that have proven effective in the past</p> <p>Algebra is the study of collections of objects (sets, groups, rings, fields, etc). In algebra, people care more about the structures of these collections and how these collections interact than about the objects themselves. In fact, with homomorphism and isomorphisms, the original objects become irrelevant. In algebra, people are always looking for equalities: Are these objects isomorphic? Can we classify all objects of this type?</p>"},{"location":"Humanities/OnFamineAffluenceMorality/","title":"Famine Affluence and Morality","text":""},{"location":"Humanities/OnFamineAffluenceMorality/#argument-esperanto","title":"Argument (Esperanto)","text":"<ul> <li>Definitions:<ul> <li><code>X := morto pro malzato a\u016d mizero</code></li> <li><code>P := malhelpi X okazi</code></li> <li>Deontic operator \\(\\mathcal{O}\\) <code>:= It's obligatory that ...</code></li> <li>Alethic operator \\(\\Diamond\\) <code>:= It's possible that ...</code></li> </ul> </li> <li>Axiom:  X estas morale mal\u011dusta. </li> <li>Argument: Supozu, mi ne oferas ion kompareblan morala graveco por \\(P\\). Se mi   povas \\(P\\) tial mi devas \\(P\\) (Jakobo 4:17,   Kant: Ought imples can \\(\\mathcal{O} p \\rightarrow \\Diamond p\\)).</li> <li>\u011ci ne influas la argumenton se:<ul> <li>mi estas la sola a\u016d estas multaj pli kapablaj \\(P\\)</li> <li>mi konas \\(X\\) rektle a\u016d estas informita pri \u011di de alia</li> </ul> </li> <li>(Utilitarian POV consecuence) We all morally ought to be working full time to   increase the balance of happiness over misery.</li> </ul>"},{"location":"Humanities/OnFamineAffluenceMorality/#urmson-saints-and-heroes","title":"Urmson: Saints and Heroes","text":"<p>We need to have a basic moral code which is not too far beyond the capacities of the ordinary man, for otherwise there will be a general breakdown of compliance with the moral code.</p>"},{"location":"Humanities/OnFamineAffluenceMorality/#glosary","title":"Glosary","text":"<ul> <li>Supererogatory: when its good but not morally required to be done     Matthew 5:38-48</li> <li>Famine:  hambruna</li> </ul>"},{"location":"Humanities/OnFamineAffluenceMorality/#references","title":"References","text":"<ul> <li> Ordinary people are evil</li> <li> Famine, Affluence, and Morality - Peter Singer (1972)</li> <li> Saint and Heroes - Elizabeth M.Pybus (2009)</li> </ul>"},{"location":"Humanities/QueerAndCyborg/","title":"Queer and Cyborg","text":""},{"location":"Humanities/QueerAndCyborg/#references","title":"References","text":"<ul> <li> Poder, teor\u00eda queer y cuerpo Cyborg - Daniel Perez D\u00edaz</li> <li> My, is that Cyborg a little bit Queer? - Esperanza Miyake</li> <li> Mother Earth, the Cyborg, and the Queer - Catriona Sandilands (1997)</li> <li> </li> </ul>"},{"location":"Humanities/TechniqueArtFreedom/","title":"Freedom because Technique","text":""},{"location":"Humanities/TechniqueArtFreedom/#references","title":"REFERENCES","text":"<ul> <li> Jazz: The Aesthetics of Imperfection - Ted Gioia (1987)</li> <li> The Aesthetics of Imperfection - Andy Hamilton (1990)</li> <li> The Art of Improvisation and the Aesthetics of Imperfection - Andy Hamilton (2000)</li> <li> Anselm on God\u2019s Perfect Freedom - Katherin A. Rogers</li> </ul>"},{"location":"Humanities/TechniqueAsFreedomInArt/","title":"Freedom because Technique in Dance","text":""},{"location":"Humanities/TechniqueAsFreedomInArt/#references","title":"REFERENCES","text":"<ul> <li> Jazz: The Aesthetics of Imperfection - Ted Gioia (1987)</li> <li> The Aesthetics of Imperfection - Andy Hamilton (1990)</li> <li> The Art of Improvisation and the Aesthetics of Imperfection - Andy Hamilton (2000)</li> <li> Anselm on God\u2019s Perfect Freedom - Katherin A. Rogers</li> </ul>"},{"location":"Science/","title":"Science \ud83e\uddec","text":"<ol> <li>Synthetic Biology</li> <li>Neurology</li> </ol>"}]}